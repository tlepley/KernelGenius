/*
  This file is part of KernelGenius.

  Copyright (C) 2013 STMicroelectronics

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 3 of the License, or (at your option) any later version.
 
  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.
 
  You should have received a copy of the GNU Lesser General Public
  License along with this program; if not, write to the Free
  Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
  Boston, MA 02110-1301 USA.
*/

#ifndef BORDER
# define BORDER undef
#endif

// Native section
${
#define VL_EPSILON_F 1.19209290E-07F
#define VL_PI 3.141592653589793f

float vl_fast_resqrt_f (float x) {
  /* 32-bit version */
  union {
    float x ;
    int  i ;
  } u ;

  float xhalf = (float) 0.5 * x ;

  /* convert floating point value in RAW integer */
  u.x = x ;

  /* gives initial guess y0 */
  u.i = 0x5f3759df - (u.i >> 1);

  /* two Newton steps */
  u.x = u.x * ( (float) 1.5f  - xhalf*u.x*u.x) ;
  u.x = u.x * ( (float) 1.5f  - xhalf*u.x*u.x) ;
  return u.x ;
}

float vl_fast_sqrt_f (float x) {
  return (x < 1e-8f) ? 0 : x * vl_fast_resqrt_f (x) ;
}

}$

// The actual kernel
kernel Sobel3x3(int width=[1:1920], int height=[1:1080],
			float in[height][width]) {
   	  	
	Filter<float> sob(in) {
		.border = BORDER;
		.function = ${
		   float gx=$in[-1][1]-$in[-1][-1]+2*($in[0][1]-$in[0][-1])+$in[1][1]-$in[1][-1];
		   float gy=$in[1][-1]-$in[-1][-1]+2*($in[1][0]-$in[-1][0])+$in[1][1]-$in[-1][1];
		   @sob[0][0]=vl_fast_sqrt_f(gx*gx+gy*gy);
		 }$;
	};
	
	return sob;
}

