/**
   Test of the Filter with inputs of different read patterns
   as well as different border semantics 

   Redistribution of this file to outside parties is
   strictly prohibited without the written consent
   of the module owner indicated below.

   \par  Module owner: 
   Thierry Lepley, STMicroelectronics (thierry.lepley@st.com)

   \par  Copyright STMicroelectronics (C) 2013

   \par  Authors: 
   Thierry Lepley, STMicroelectronics (thierry.lepley@st.com)
**/

#ifndef BORDER1
# define BORDER1 undef
#endif
#ifndef BORDER2
# define BORDER2 duplicate
#endif
#ifndef WINDOW1
# define WINDOW1 1
#endif
#ifndef WINDOW2
# define WINDOW2 2
#endif


${
  constant int lut1x[8] = {WINDOW1,WINDOW1,0,-WINDOW1,-WINDOW1,-WINDOW1,0,WINDOW1};
  constant int lut1y[8] = {0,WINDOW1,WINDOW1,WINDOW1,0,-WINDOW1,-WINDOW1,-WINDOW1};

  constant int lut2x[8] = {-WINDOW2,-WINDOW2,0,WINDOW2,WINDOW2,WINDOW2,0,-WINDOW2};
  constant int lut2y[8] = {0,-WINDOW2,-WINDOW2,-WINDOW2,0,WINDOW2,WINDOW2,WINDOW2};
}$


kernel BorderInputs(int width=[1:1920], int height=[1:1080],
		    char dir[height][width], int val[height][width]) {

  Filter<int> out(dir,val) {
    .border(dir) = BORDER1;
    .read_bound(dir) = [-WINDOW1:WINDOW1][-WINDOW1:WINDOW1];
    .border(val) = BORDER2;
    .read_bound(val) = [-WINDOW2:WINDOW2][-WINDOW2:WINDOW2];

    .function = ${
      int x1=lut1x[$dir[0][0]%8];
      int y1=lut1y[$dir[0][0]%8];
      int x2=lut1x[$val[0][0]%8];
      int y2=lut1y[$val[0][0]%8];
      
      @out[0][0] = $dir[y1][x1] + $val[y2][x2];
    }$;
  };

  return out;
}
